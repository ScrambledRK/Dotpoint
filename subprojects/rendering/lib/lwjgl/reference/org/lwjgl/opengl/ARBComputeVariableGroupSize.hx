package org.lwjgl.opengl;

import java.StdTypes;
@:native("org.lwjgl.opengl.ARBComputeVariableGroupSize")
@:final
/**
 * Native bindings to the <a href="http://www.opengl.org/registry/specs/ARB/compute_variable_group_size.txt">ARB_compute_variable_group_size</a> extension.
 * 
 * <p>This extension allows applications to write generic compute shaders that operate on work groups with arbitrary dimensions. Instead of specifying a fixed
 * work group size in the compute shader, an application can use a compute shader using the {@code local_size_variable} layout qualifer to indicate a
 * variable work group size. When using such compute shaders, the new command DispatchComputeGroupSizeARB should be used to specify both a work group size
 * and work group count.</p>
 * 
 * <p>In this extension, compute shaders with fixed group sizes must be dispatched by {@link GL43#glDispatchCompute DispatchCompute} and {@link GL43#glDispatchComputeIndirect DispatchComputeIndirect}. Compute
 * shaders with variable group sizes must be dispatched via {@link #glDispatchComputeGroupSizeARB DispatchComputeGroupSizeARB}. No support is provided in this extension for indirect dispatch
 * of compute shaders with a variable group size.</p>
 * 
 * <p>Requires {@link GL43 OpenGL 4.3} or {@link ARBComputeShader ARB_compute_shader}.</p>
 */
extern class ARBComputeVariableGroupSize 
{
/** Accepted by the {@code pname} parameter of GetIntegerv, GetBooleanv, GetFloatv, GetDoublev and GetInteger64v.  */
	inline static public var GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB:Int = 37700;
/** Accepted by the {@code pname} parameter of GetIntegerv, GetBooleanv, GetFloatv, GetDoublev and GetInteger64v.  */
	inline static public var GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB:Int = 37099;
/** Accepted by the {@code pname} parameter of GetIntegeri_v, GetBooleani_v, GetFloati_v, GetDoublei_v and GetInteger64i_v.  */
	inline static public var GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB:Int = 37701;
/** Accepted by the {@code pname} parameter of GetIntegeri_v, GetBooleani_v, GetFloati_v, GetDoublei_v and GetInteger64i_v.  */
	inline static public var GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB:Int = 37311;
/** Function address.  */
	public var DispatchComputeGroupSizeARB:haxe.Int64;
	public function new(provider:org.lwjgl.system.FunctionProvider):Void;
/** JNI method for {@link #glDispatchComputeGroupSizeARB DispatchComputeGroupSizeARB}  */
	static public function nglDispatchComputeGroupSizeARB(num_groups_x:Int,num_groups_y:Int,num_groups_z:Int,group_size_x:Int,group_size_y:Int,group_size_z:Int,__functionAddress:haxe.Int64):Void;
/** Returns the {@link ARBComputeVariableGroupSize} instance for the current context.  */
	static public function getInstance():org.lwjgl.opengl.ARBComputeVariableGroupSize;
/**
 * Launches one or more compute work groups, with arbitrary dimensions.
 * 
 * <p>An {@link GL11#GL_INVALID_OPERATION INVALID_OPERATION} error is generated by DispatchComputeGroupSizeARB if the active program for the compute shader stage has a fixed work group
 * size.</p>
 * 
 * <p>An {@link GL11#GL_INVALID_VALUE INVALID_VALUE} error is generated by DispatchComputeGroupSizeARB if any of {@code group_size_x}, {@code group_size_y}, or {@code group_size_z} is
 * less than or equal to zero or greater than the maximum local work group size for compute shaders with variable group size
 * ({@link #GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB}) in the corresponding dimension.</p>
 * 
 * <p>An {@link GL11#GL_INVALID_VALUE INVALID_VALUE} error is generated by DispatchComputeGroupSizeARB if the product of {@code group_size_x}, {@code group_size_y}, and
 * {@code group_size_z} exceeds the implementation-dependent maximum local work group invocation count for compute shaders with variable group size
 * ({@link #GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB}).</p>
 *
 * @param num_groups_x the number of work groups to be launched in the X dimension
 * @param num_groups_y the number of work groups to be launched in the Y dimension
 * @param num_groups_z the number of work groups to be launched in the Z dimension
 * @param group_size_x the group size in the X dimension
 * @param group_size_y the group size in the Y dimension
 * @param group_size_z the group size in the Z dimension
 */
	static public function glDispatchComputeGroupSizeARB(num_groups_x:Int,num_groups_y:Int,num_groups_z:Int,group_size_x:Int,group_size_y:Int,group_size_z:Int):Void;

}
